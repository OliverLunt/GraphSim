<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.3.4">
  <compounddef id="structLocCliffOp" kind="struct">
    <compoundname>LocCliffOp</compoundname>
    <includes refid="loccliff_8h" local="no">loccliff.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structLocCliffOp_1a0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>LocCliffOp::LocCliffOp</definition>
        <argsstring>(unsigned short int op_)</argsstring>
        <name>LocCliffOp</name>
        <param>
          <type>unsigned short int</type>
          <declname>op_</declname>
        </param>
        <briefdescription>
<para>constructor, takes an integer in 0..23. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <location file="/net/dopey1/sanders/work/graphsim-0.10/loccliff.h" line="78" bodystart="192" bodyend="195"/>
        <references refid="structLocCliffOp_1o0" compoundref="loccliff_8h" startline="75">op</references>
      </memberdef>
      <memberdef kind="function" id="structLocCliffOp_1a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>LocCliffOp::LocCliffOp</definition>
        <argsstring>(unsigned short int signsymb, unsigned short int permsymb)</argsstring>
        <name>LocCliffOp</name>
        <param>
          <type>unsigned short int</type>
          <declname>signsymb</declname>
        </param>
        <param>
          <type>unsigned short int</type>
          <declname>permsymb</declname>
        </param>
        <briefdescription>
<para>constructor, takes a sign symbol in 0..3 (for I, X, Y, Z) and a </para>        </briefdescription>
        <detaileddescription>
<para>permutation symbol 0..5 (for A, B, ..., F) </para>        </detaileddescription>
        <location file="/net/dopey1/sanders/work/graphsim-0.10/loccliff.h" line="82" bodystart="197" bodyend="202"/>
        <references refid="structLocCliffOp_1o0" compoundref="loccliff_8h" startline="75">op</references>
      </memberdef>
      <memberdef kind="function" id="structLocCliffOp_1a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>string</type>
        <definition>string LocCliffOp::get_name</definition>
        <argsstring>(void) const </argsstring>
        <name>get_name</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>returns something like e.g. &quot;YC&quot; for Hadamard=Y^C </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <location file="/net/dopey1/sanders/work/graphsim-0.10/loccliff.h" line="85" bodystart="30" bodyend="34"/>
      </memberdef>
      <memberdef kind="function" id="structLocCliffOp_1a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structRightPhase" kindref="compound">RightPhase</ref></type>
        <definition>RightPhase LocCliffOp::conjugate</definition>
        <argsstring>(const  LocCliffOp trans)</argsstring>
        <name>conjugate</name>
        <param>
          <type>const <ref refid="structLocCliffOp" kindref="compound">LocCliffOp</ref></type>
          <declname>trans</declname>
        </param>
        <briefdescription>
<para>replaces op by trans * op * trans^dagger and returns a phase, </para>        </briefdescription>
        <detaileddescription>
<para>either +1 or -1 (as RightPhase(0) or RightPhase(2)) </para>        </detaileddescription>
        <location file="/net/dopey1/sanders/work/graphsim-0.10/loccliff.h" line="89" bodystart="36" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="structLocCliffOp_1a4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structLocCliffOp" kindref="compound">LocCliffOp</ref></type>
        <definition>LocCliffOp LocCliffOp::herm_adjoint</definition>
        <argsstring>(void) const </argsstring>
        <name>herm_adjoint</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>returns the Hermitian adjoint of op </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <location file="/net/dopey1/sanders/work/graphsim-0.10/loccliff.h" line="92" bodystart="204" bodyend="207"/>
        <references refid="structLocCliffOp_1o0" compoundref="loccliff_8h" startline="75">op</references>
      </memberdef>
      <memberdef kind="function" id="structLocCliffOp_1a5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool LocCliffOp::isXY</definition>
        <argsstring>(void) const </argsstring>
        <name>isXY</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>returns True if op is XA or YA. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <location file="/net/dopey1/sanders/work/graphsim-0.10/loccliff.h" line="98" bodystart="216" bodyend="219"/>
        <references refid="loccliff_8h_1a2" compoundref="loccliff_8h" startline="137">lco_X</references>
        <references refid="loccliff_8h_1a3" compoundref="loccliff_8h" startline="138">lco_Y</references>
        <references refid="structLocCliffOp_1o0" compoundref="loccliff_8h" startline="75">op</references>
      </memberdef>
      <memberdef kind="function" id="structLocCliffOp_1a6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool LocCliffOp::is_diagonal</definition>
        <argsstring>(void) const </argsstring>
        <name>is_diagonal</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>returns True if op is an operator diagonal in the computational basis </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <location file="/net/dopey1/sanders/work/graphsim-0.10/loccliff.h" line="101" bodystart="221" bodyend="225"/>
        <references refid="loccliff_8h_1a1" compoundref="loccliff_8h" startline="136">lco_Id</references>
        <references refid="loccliff_8h_1a7" compoundref="loccliff_8h" startline="142">lco_smiZ</references>
        <references refid="loccliff_8h_1a6" compoundref="loccliff_8h" startline="141">lco_spiZ</references>
        <references refid="loccliff_8h_1a4" compoundref="loccliff_8h" startline="139">lco_Z</references>
        <references refid="structLocCliffOp_1o0" compoundref="loccliff_8h" startline="75">op</references>
      </memberdef>
      <memberdef kind="function" id="structLocCliffOp_1a7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>RightMatrix</type>
        <definition>RightMatrix LocCliffOp::get_matrix</definition>
        <argsstring>(void) const </argsstring>
        <name>get_matrix</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <location file="/net/dopey1/sanders/work/graphsim-0.10/loccliff.h" line="103" bodystart="70" bodyend="95"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structLocCliffOp_1o0" prot="public" static="no" volatile="no" mutable="no">
        <type>unsigned short</type>
        <definition>unsigned short LocCliffOp::op</definition>
        <argsstring></argsstring>
        <name>op</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The field &apos;op&apos; identifies the operator. 0 is identity I, 1 is Pauli X, 2 is Pauli Y, 3 is Pauli Z, 4 is I^B, 5 is I^C etc. </para>        </detaileddescription>
        <location file="/net/dopey1/sanders/work/graphsim-0.10/loccliff.h" line="75" bodystart="75" bodyend="-1"/>
        <referencedby refid="structLocCliffOp_1a4" compoundref="loccliff_8h" startline="204" endline="207">herm_adjoint</referencedby>
        <referencedby refid="structLocCliffOp_1a6" compoundref="loccliff_8h" startline="221" endline="225">is_diagonal</referencedby>
        <referencedby refid="structLocCliffOp_1a5" compoundref="loccliff_8h" startline="216" endline="219">isXY</referencedby>
        <referencedby refid="structLocCliffOp_1a0" compoundref="loccliff_8h" startline="192" endline="195">LocCliffOp</referencedby>
        <referencedby refid="structLocCliffOp_1e0" compoundref="loccliff_8h" startline="209" endline="213">mult_phase</referencedby>
        <referencedby refid="loccliff_8h_1a18" compoundref="loccliff_8h" startline="227" endline="230">operator *</referencedby>
        <referencedby refid="loccliff_8h_1a20" compoundref="loccliff_8h" startline="237" endline="240">operator!=</referencedby>
        <referencedby refid="loccliff_8h_1a19" compoundref="loccliff_8h" startline="232" endline="235">operator==</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structLocCliffOp_1e0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structRightPhase" kindref="compound">RightPhase</ref></type>
        <definition>RightPhase LocCliffOp::mult_phase</definition>
        <argsstring>(LocCliffOp op1, LocCliffOp op2)</argsstring>
        <name>mult_phase</name>
        <param>
          <type><ref refid="structLocCliffOp" kindref="compound">LocCliffOp</ref></type>
          <declname>op1</declname>
        </param>
        <param>
          <type><ref refid="structLocCliffOp" kindref="compound">LocCliffOp</ref></type>
          <declname>op2</declname>
        </param>
        <briefdescription>
<para>returns the phase of the multiplication of op1 * op2 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <location file="/net/dopey1/sanders/work/graphsim-0.10/loccliff.h" line="95" bodystart="209" bodyend="213"/>
        <references refid="loccliff_8h_1a4" compoundref="loccliff_8h" startline="139">lco_Z</references>
        <references refid="structLocCliffOp_1o0" compoundref="loccliff_8h" startline="75">op</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An operator in the local Clifford group. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/net/dopey1/sanders/work/graphsim-0.10/loccliff.h" line="71" bodystart="71" bodyend="104"/>
    <listofallmembers>
      <member refid="structLocCliffOp_1a3" prot="public" virt="non-virtual"><scope>LocCliffOp</scope><name>conjugate</name></member>
      <member refid="structLocCliffOp_1a7" prot="public" virt="non-virtual"><scope>LocCliffOp</scope><name>get_matrix</name></member>
      <member refid="structLocCliffOp_1a2" prot="public" virt="non-virtual"><scope>LocCliffOp</scope><name>get_name</name></member>
      <member refid="structLocCliffOp_1a4" prot="public" virt="non-virtual"><scope>LocCliffOp</scope><name>herm_adjoint</name></member>
      <member refid="structLocCliffOp_1a6" prot="public" virt="non-virtual"><scope>LocCliffOp</scope><name>is_diagonal</name></member>
      <member refid="structLocCliffOp_1a5" prot="public" virt="non-virtual"><scope>LocCliffOp</scope><name>isXY</name></member>
      <member refid="structLocCliffOp_1a0" prot="public" virt="non-virtual"><scope>LocCliffOp</scope><name>LocCliffOp</name></member>
      <member refid="structLocCliffOp_1a1" prot="public" virt="non-virtual"><scope>LocCliffOp</scope><name>LocCliffOp</name></member>
      <member refid="structLocCliffOp_1e0" prot="public" virt="non-virtual"><scope>LocCliffOp</scope><name>mult_phase</name></member>
      <member refid="structLocCliffOp_1o0" prot="public" virt="non-virtual"><scope>LocCliffOp</scope><name>op</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
