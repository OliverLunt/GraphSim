<?xml version='1.0' encoding='iso-8859-1' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.3.4">
  <compounddef id="graphsim_8cpp" kind="file">
    <compoundname>graphsim.cpp</compoundname>
    <includes refid="graphsim_8h" local="yes">graphsim.h</includes>
    <includes local="no">utility</includes>
    <includes local="no">ctime</includes>
    <includes local="yes">cphase.tbl</includes>
    <incdepgraph>
      <node id="10">
        <label>ext/hash_set</label>
      </node>
      <node id="1">
        <label>graphsim.h</label>
        <link refid="graphsim_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="5">
        <label>cassert</label>
      </node>
      <node id="7">
        <label>string</label>
      </node>
      <node id="8">
        <label>multtbl.tbl</label>
      </node>
      <node id="6">
        <label>loccliff.h</label>
        <link refid="loccliff_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>cphase.tbl</label>
      </node>
      <node id="12">
        <label>ctime</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
      <node id="0">
        <label>graphsim.cpp</label>
        <link refid="graphsim.cpp"/>
        <childnode refid="1" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>utility</label>
      </node>
      <node id="2">
        <label>iostream</label>
      </node>
      <node id="9">
        <label>stabilizer.h</label>
        <link refid="stabilizer_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structEdge">Edge</innerclass>
    <innerclass refid="structedge__hash">edge_hash</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="graphsim_8cpp_1a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int bool_rand</definition>
        <argsstring>(void)</argsstring>
        <name>bool_rand</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Random coin toss. Change here to insert your favorite RNG. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <location file="/net/dopey1/sanders/work/graphsim-0.10/graphsim.cpp" line="9" bodystart="9" bodyend="11"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>graphsim.cpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="graphsim_8h" kindref="compound">graphsim.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctime&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bool_rand<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>random<sp/>()<sp/>&gt;<sp/>RAND_MAX/2;</highlight></codeline>
<codeline lineno="11"><highlight class="normal">}</highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"></codeline>
<codeline lineno="20" refid="classGraphRegister_1a0" refkind="member"><highlight class="normal"><ref refid="classGraphRegister_1a0" kindref="member">GraphRegister::GraphRegister</ref><sp/>(<ref refid="graphsim_8h_1a1" kindref="member">VertexIndex</ref><sp/>numQubits,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>randomize)</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/>:<sp/>vertices<sp/>(numQubits)<sp/></highlight></codeline>
<codeline lineno="22"><highlight class="normal">{</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(randomize<sp/>&gt;<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>srandom<sp/>(time(NULL)<sp/>+<sp/>randomize);</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"></codeline>
<codeline lineno="30" refid="classGraphRegister_1a1" refkind="member"><highlight class="normal"><ref refid="classGraphRegister_1a0" kindref="member">GraphRegister::GraphRegister</ref><sp/>(<ref refid="classGraphRegister" kindref="compound">GraphRegister</ref>&amp;<sp/>gr)</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/>:<sp/>vertices<sp/>(gr.vertices)</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal">}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GraphRegister::add_edge<sp/>(<ref refid="graphsim_8h_1a1" kindref="member">VertexIndex</ref><sp/>v1,<sp/><ref refid="graphsim_8h_1a1" kindref="member">VertexIndex</ref><sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/>assert<sp/>(v1<sp/>!=<sp/>v2);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><ref refid="classGraphRegister_1o0" kindref="member">vertices</ref>[v1].neighbors.insert<sp/>(v2);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><ref refid="classGraphRegister_1o0" kindref="member">vertices</ref>[v2].neighbors.insert<sp/>(v1);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//D<sp/>cerr<sp/>&lt;&lt;<sp/>&quot;adding<sp/>edge<sp/>&quot;<sp/>&lt;&lt;<sp/>v1<sp/>&lt;&lt;<sp/>&quot;<sp/>-<sp/>&quot;<sp/>&lt;&lt;<sp/>v2<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GraphRegister::del_edge<sp/>(<ref refid="graphsim_8h_1a1" kindref="member">VertexIndex</ref><sp/>v1,<sp/><ref refid="graphsim_8h_1a1" kindref="member">VertexIndex</ref><sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/>DBGOUT<sp/>(</highlight><highlight class="stringliteral">&quot;deling<sp/>edge<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>-<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v2<sp/>&lt;&lt;<sp/>endl);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><ref refid="classGraphRegister_1o0" kindref="member">vertices</ref>[v1].neighbors.erase<sp/>(v2);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><ref refid="classGraphRegister_1o0" kindref="member">vertices</ref>[v2].neighbors.erase<sp/>(v1);</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"></codeline>
<codeline lineno="52"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GraphRegister::toggle_edge<sp/>(<ref refid="graphsim_8h_1a1" kindref="member">VertexIndex</ref><sp/>v1,<sp/><ref refid="graphsim_8h_1a1" kindref="member">VertexIndex</ref><sp/>v2)<sp/></highlight></codeline>
<codeline lineno="53"><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n1<sp/>=<sp/><ref refid="classGraphRegister_1o0" kindref="member">vertices</ref>[v1].neighbors.erase<sp/>(v2);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(n1<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertices[v2].neighbors.erase<sp/>(v1);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(n1<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>add_edge<sp/>(v1,<sp/>v2);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"></codeline>
<codeline lineno="66" refid="classGraphRegister_1a11" refkind="member"><highlight class="normal"><ref refid="structStabilizer" kindref="compound">Stabilizer</ref>&amp;<sp/><ref refid="classGraphRegister_1a11" kindref="member">GraphRegister::get_full_stabilizer</ref><sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="67"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/>hash_set&lt;VertexIndex&gt;<sp/>all_qubits;<sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="graphsim_8h_1a4" kindref="member">VertexIterConst</ref><sp/>i<sp/>=<sp/><ref refid="classGraphRegister_1o0" kindref="member">vertices</ref>.begin();<sp/>i<sp/>!=<sp/><ref refid="classGraphRegister_1o0" kindref="member">vertices</ref>.end();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>all_qubits.insert<sp/>(i-<ref refid="classGraphRegister_1o0" kindref="member">vertices</ref>.begin());</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><ref refid="structStabilizer" kindref="compound">Stabilizer</ref><sp/>*s<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="structStabilizer" kindref="compound">Stabilizer</ref><sp/>(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>all_qubits);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*s;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"></codeline>
<codeline lineno="78" refid="classGraphRegister_1a13" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classGraphRegister_1a13" kindref="member">GraphRegister::print_adj_list</ref><sp/>(ostream&amp;<sp/>os)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="79"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="graphsim_8h_1a1" kindref="member">VertexIndex</ref><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classGraphRegister_1o0" kindref="member">vertices</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGraphRegister_1a14" kindref="member">print_adj_list_line</ref><sp/>(os,<sp/>i);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="classGraphRegister_1a14" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classGraphRegister_1a14" kindref="member">GraphRegister::print_adj_list_line</ref><sp/>(ostream&amp;<sp/>os,<sp/><ref refid="graphsim_8h_1a1" kindref="member">VertexIndex</ref><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight></codeline>
<codeline lineno="87"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Vertex<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>i<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;:<sp/>VOp<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/><sp/><ref refid="classGraphRegister_1o0" kindref="member">vertices</ref>[i].byprod.get_name()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>neighbors<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="graphsim_8h_1a5" kindref="member">VtxIdxIterConst</ref><sp/>j<sp/>=<sp/>vertices[i].neighbors.begin();<sp/></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>j<sp/>!=<sp/>vertices[i].neighbors.end();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>*j<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/>os<sp/>&lt;&lt;<sp/>endl;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="classGraphRegister_1a15" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classGraphRegister_1a15" kindref="member">GraphRegister::print_stabilizer</ref><sp/>(ostream<sp/>&amp;os)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="99"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><ref refid="classGraphRegister_1a11" kindref="member">get_full_stabilizer</ref>().<ref refid="structStabilizer_1a6" kindref="member">print</ref><sp/>(os);</highlight></codeline>
<codeline lineno="101"><highlight class="normal">}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GraphRegister::cphase_with_table<sp/>(<ref refid="graphsim_8h_1a1" kindref="member">VertexIndex</ref><sp/>v1,<sp/><ref refid="graphsim_8h_1a1" kindref="member">VertexIndex</ref><sp/>v2)</highlight></codeline>
<codeline lineno="106"><highlight class="normal">{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Structure<sp/>of<sp/>the<sp/>table:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>index:<sp/>whether<sp/>there<sp/>was<sp/>an<sp/>edge<sp/>between<sp/>the<sp/>operands<sp/>before</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>(0=no,<sp/>1=<sp/>yes)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>second<sp/>and<sp/>third<sp/>index:<sp/>byprod<sp/>op<sp/>of<sp/>v1<sp/>and<sp/>v2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>third<sp/>index:<sp/>information<sp/>to<sp/>obtain:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>0=<sp/>whether<sp/>after<sp/>the<sp/>cphase<sp/>there<sp/>is<sp/>an<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>1,2=<sp/>new<sp/>values<sp/>of<sp/>the<sp/>byprod<sp/>ops<sp/>of<sp/>v1<sp/>and<sp/>v2Id</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">short</highlight><highlight class="normal"><sp/>cphase_tbl[2][24][24][3]<sp/>=</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#include<sp/>&quot;cphase.tbl&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>DEBUGOUTPUT</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DBGOUT<sp/>(</highlight><highlight class="stringliteral">&quot;cphase_with_table<sp/>called<sp/>on:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGraphRegister_1a14" kindref="member">print_adj_list_line</ref><sp/>(cout,<sp/>v1);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGraphRegister_1a14" kindref="member">print_adj_list_line</ref><sp/>(cout,<sp/>v2);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="122"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="structConnectionInfo" kindref="compound">ConnectionInfo</ref><sp/>ci<sp/>=<sp/>getConnectionInfo<sp/>(v1,<sp/>v2);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>op1<sp/>=<sp/><ref refid="classGraphRegister_1o0" kindref="member">vertices</ref>[v1].byprod.op;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>op2<sp/>=<sp/>vertices[v2].byprod.op;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>table<sp/>must<sp/>only<sp/>be<sp/>used<sp/>if<sp/>a<sp/>vertex<sp/>has<sp/>either<sp/>no</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>non-operand<sp/>neighbors,<sp/>or<sp/>a<sp/>diagonal<sp/>byprod<sp/>op</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/>assert<sp/>((!ci.<ref refid="structConnectionInfo_1o1" kindref="member">non1</ref>)<sp/>||<sp/>vertices[v1].byprod.is_diagonal());</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/>assert<sp/>((!ci.<ref refid="structConnectionInfo_1o2" kindref="member">non2</ref>)<sp/>||<sp/>vertices[v2].byprod.is_diagonal());</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cphase_tbl[ci.<ref refid="structConnectionInfo_1o0" kindref="member">wasEdge</ref>][op1][op2][0])<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>add_edge<sp/>(v1,<sp/>v2);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DBGOUT<sp/>(</highlight><highlight class="stringliteral">&quot;adding<sp/>edge&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>del_edge<sp/>(v1,<sp/>v2);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DBGOUT<sp/>(</highlight><highlight class="stringliteral">&quot;deling<sp/>edge&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>endl);<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/>vertices[v1].byprod.op<sp/>=<sp/>cphase_tbl[ci.<ref refid="structConnectionInfo_1o0" kindref="member">wasEdge</ref>][op1][op2][1];</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/>vertices[v2].byprod.op<sp/>=<sp/>cphase_tbl[ci.<ref refid="structConnectionInfo_1o0" kindref="member">wasEdge</ref>][op1][op2][2];</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>DEBUGOUTPUT</highlight></codeline>
<codeline lineno="139"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DBGOUT<sp/>(</highlight><highlight class="stringliteral">&quot;cphase_with_table:<sp/>after:\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGraphRegister_1a14" kindref="member">print_adj_list_line</ref><sp/>(cout,<sp/>v1);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGraphRegister_1a14" kindref="member">print_adj_list_line</ref><sp/>(cout,<sp/>v2);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>condition<sp/>above<sp/>must<sp/>also<sp/>hold<sp/>afterwards:	</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/>ci<sp/>=<sp/>getConnectionInfo<sp/>(v1,<sp/>v2);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/>assert<sp/>((!ci.<ref refid="structConnectionInfo_1o1" kindref="member">non1</ref>)<sp/>||<sp/>vertices[v1].byprod.is_diagonal());</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/>assert<sp/>((!ci.<ref refid="structConnectionInfo_1o2" kindref="member">non2</ref>)<sp/>||<sp/>vertices[v2].byprod.is_diagonal());</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><ref refid="structConnectionInfo" kindref="compound">ConnectionInfo</ref><sp/>GraphRegister::getConnectionInfo<sp/></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>(<ref refid="graphsim_8h_1a1" kindref="member">VertexIndex</ref><sp/>v1,<sp/><ref refid="graphsim_8h_1a1" kindref="member">VertexIndex</ref><sp/>v2)<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><ref refid="structConnectionInfo" kindref="compound">ConnectionInfo</ref><sp/>ci;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/>ci.<ref refid="structConnectionInfo_1o0" kindref="member">wasEdge</ref><sp/>=<sp/></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>vertices[v1].neighbors.find(v2)<sp/>!=<sp/>vertices[v1].neighbors.end();</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>ci.<ref refid="structConnectionInfo_1o0" kindref="member">wasEdge</ref>)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ci.<ref refid="structConnectionInfo_1o1" kindref="member">non1</ref><sp/>=<sp/>vertices[v1].neighbors.size()<sp/>&gt;=<sp/>1;<sp/></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ci.<ref refid="structConnectionInfo_1o2" kindref="member">non2</ref><sp/>=<sp/>vertices[v2].neighbors.size()<sp/>&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ci.<ref refid="structConnectionInfo_1o1" kindref="member">non1</ref><sp/>=<sp/>vertices[v1].neighbors.size()<sp/>&gt;=<sp/>2;<sp/></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ci.<ref refid="structConnectionInfo_1o2" kindref="member">non2</ref><sp/>=<sp/>vertices[v2].neighbors.size()<sp/>&gt;=<sp/>2;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ci;</highlight></codeline>
<codeline lineno="163"><highlight class="normal">}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="166" refid="classGraphRegister_1a8" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classGraphRegister_1a8" kindref="member">GraphRegister::cphase</ref><sp/>(<ref refid="graphsim_8h_1a1" kindref="member">VertexIndex</ref><sp/>v1,<sp/><ref refid="graphsim_8h_1a1" kindref="member">VertexIndex</ref><sp/>v2)<sp/></highlight></codeline>
<codeline lineno="167"><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>are<sp/>non-operand<sp/>neighbors,<sp/>we<sp/>can<sp/>use<sp/>neighborhood<sp/>inversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>remove<sp/>the<sp/>byprod<sp/>operators.<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>will<sp/>store<sp/>whether<sp/>the<sp/>operand<sp/>vertices<sp/>have<sp/>nonoperand<sp/>neighbors.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>DEBUGOUTPUT</highlight></codeline>
<codeline lineno="172"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DBGOUT<sp/>(</highlight><highlight class="stringliteral">&quot;before<sp/>cphase<sp/>between<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v1<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>and<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v2<sp/>&lt;&lt;<sp/>endl);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGraphRegister_1a14" kindref="member">print_adj_list_line</ref><sp/>(cout,<sp/>v1);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGraphRegister_1a14" kindref="member">print_adj_list_line</ref><sp/>(cout,<sp/>v2);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="176"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="structConnectionInfo" kindref="compound">ConnectionInfo</ref><sp/>ci<sp/>=<sp/>getConnectionInfo<sp/>(v1,<sp/>v2);</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ci.<ref refid="structConnectionInfo_1o1" kindref="member">non1</ref>)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DBGOUT<sp/>(</highlight><highlight class="stringliteral">&quot;cphase:<sp/>left<sp/>vertex<sp/>has<sp/>NONs<sp/>-&gt;<sp/>putting<sp/>it<sp/>to<sp/>Id\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>remove_byprod_op<sp/>(v1,<sp/>v2);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/>ci<sp/>=<sp/>getConnectionInfo<sp/>(v1,<sp/>v2);</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ci.<ref refid="structConnectionInfo_1o2" kindref="member">non2</ref>)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DBGOUT<sp/>(</highlight><highlight class="stringliteral">&quot;cphase:<sp/>right<sp/>vertex<sp/>has<sp/>NONs<sp/>-&gt;<sp/>putting<sp/>it<sp/>to<sp/>Id\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>remove_byprod_op<sp/>(v2,<sp/>v1);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/>ci<sp/>=<sp/>getConnectionInfo<sp/>(v1,<sp/>v2);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ci.<ref refid="structConnectionInfo_1o1" kindref="member">non1</ref><sp/>&amp;&amp;<sp/>!vertices[v1].byprod.is_diagonal())<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>can<sp/>happen<sp/>if<sp/>v1<sp/>was<sp/>first<sp/>skipped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DBGOUT<sp/>(</highlight><highlight class="stringliteral">&quot;cphase:<sp/>left<sp/>one<sp/>needs<sp/>treatment<sp/>again<sp/>-&gt;<sp/>putting<sp/>it<sp/>to<sp/>Id\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>remove_byprod_op<sp/>(v1,<sp/>v2);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/>cphase_with_table<sp/>(v1,<sp/>v2);</highlight></codeline>
<codeline lineno="194"><highlight class="normal">}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="classGraphRegister_1a9" refkind="member"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classGraphRegister_1a9" kindref="member">GraphRegister::cnot</ref><sp/>(<ref refid="graphsim_8h_1a1" kindref="member">VertexIndex</ref><sp/>vc,<sp/><ref refid="graphsim_8h_1a1" kindref="member">VertexIndex</ref><sp/>vt)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><ref refid="classGraphRegister_1a4" kindref="member">hadamard</ref><sp/>(vt);</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><ref refid="classGraphRegister_1a8" kindref="member">cphase</ref><sp/>(vc,<sp/>vt);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><ref refid="classGraphRegister_1a4" kindref="member">hadamard</ref><sp/>(vt);</highlight></codeline>
<codeline lineno="202"><highlight class="normal">}</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="205" refid="structEdge" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structEdge" kindref="compound">Edge</ref>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>pair&lt;VertexIndex,<sp/>VertexIndex&gt;<sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><ref refid="structEdge" kindref="compound">Edge</ref><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="graphsim_8h_1a1" kindref="member">VertexIndex</ref><sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="graphsim_8h_1a1" kindref="member">VertexIndex</ref><sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(a<sp/>&lt;<sp/>b)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>a;<sp/>second<sp/>=<sp/>b;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>first<sp/>=<sp/>b;<sp/>second<sp/>=<sp/>a;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="213"><highlight class="normal">};</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="216" refid="structedge__hash" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structedge__hash" kindref="compound">edge_hash</ref><sp/>{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/>size_t<sp/>operator()<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structEdge" kindref="compound">Edge</ref>&amp;<sp/>e)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="218"><highlight class="keyword"><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>e.first<sp/>&lt;&lt;<sp/>16<sp/>^<sp/>e.second;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="221"><highlight class="normal">};<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"></codeline>
<codeline lineno="228"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GraphRegister::toggle_edges<sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hash_set&lt;VertexIndex&gt;<sp/>vs1,<sp/></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>hash_set&lt;VertexIndex&gt;<sp/>vs2)</highlight></codeline>
<codeline lineno="230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/>hash_set&lt;Edge,<sp/>edge_hash&gt;<sp/>procd_edges;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="graphsim_8h_1a5" kindref="member">VtxIdxIterConst</ref><sp/>i<sp/>=<sp/>vs1.begin();<sp/>i<sp/>!=<sp/>vs1.end();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="graphsim_8h_1a5" kindref="member">VtxIdxIterConst</ref><sp/>j<sp/>=<sp/>vs2.begin();<sp/>j<sp/>!=<sp/>vs2.end();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((*i<sp/>!=<sp/>*j)<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(procd_edges.find<sp/>(<ref refid="structEdge" kindref="compound">Edge</ref><sp/>(*i,<sp/>*j))<sp/>==<sp/>procd_edges.end()))<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>procd_edges.insert<sp/>(<ref refid="structEdge" kindref="compound">Edge</ref><sp/>(*i,<sp/>*j));</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toggle_edge<sp/>(*i,<sp/>*j);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal">}</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GraphRegister::graph_Z_measure<sp/>(<ref refid="graphsim_8h_1a1" kindref="member">VertexIndex</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>force)<sp/></highlight></codeline>
<codeline lineno="245"><highlight class="normal">{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(force<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>bool_rand<sp/>();</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>force;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/>DBGOUT<sp/>(</highlight><highlight class="stringliteral">&quot;gZm&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>res<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>DEBUGOUTPUT</highlight></codeline>
<codeline lineno="254"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGraphRegister_1a14" kindref="member">print_adj_list_line</ref><sp/>(cout,<sp/>v);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="256"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/>hash_set&lt;VertexIndex&gt;<sp/>nbg<sp/>=<sp/>vertices[v].neighbors;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="graphsim_8h_1a3" kindref="member">VtxIdxIter</ref><sp/>i<sp/>=<sp/>nbg.begin();<sp/>i<sp/>!=<sp/>nbg.end();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>del_edge<sp/>(v,<sp/>*i);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res)<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertices[*i].byprod<sp/>=<sp/>vertices[*i].byprod<sp/>*<sp/><ref refid="loccliff_8h_1a4" kindref="member">lco_Z</ref>;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>res)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertices[v].byprod<sp/>=<sp/>vertices[v].byprod<sp/>*<sp/><ref refid="loccliff_8h_1a5" kindref="member">lco_H</ref>;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertices[v].byprod<sp/>=<sp/>vertices[v].byprod<sp/>*<sp/><ref refid="loccliff_8h_1a2" kindref="member">lco_X</ref><sp/>*<sp/><ref refid="loccliff_8h_1a5" kindref="member">lco_H</ref>;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="269"><highlight class="normal">}</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GraphRegister::graph_Y_measure<sp/>(<ref refid="graphsim_8h_1a1" kindref="member">VertexIndex</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>force)</highlight></codeline>
<codeline lineno="273"><highlight class="normal">{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(force<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>bool_rand<sp/>();</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>force;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/>DBGOUT<sp/>(</highlight><highlight class="stringliteral">&quot;gYm&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>res<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/>hash_set&lt;VertexIndex&gt;<sp/>vnbg<sp/>=<sp/>vertices[v].neighbors;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="graphsim_8h_1a3" kindref="member">VtxIdxIter</ref><sp/>i<sp/>=<sp/>vnbg.begin();<sp/>i<sp/>!=<sp/>vnbg.end();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(res)<sp/>{</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertices[*i].byprod<sp/>=<sp/>vertices[*i].byprod<sp/>*<sp/><ref refid="loccliff_8h_1a6" kindref="member">lco_spiZ</ref>;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertices[*i].byprod<sp/>=<sp/>vertices[*i].byprod<sp/>*<sp/><ref refid="loccliff_8h_1a7" kindref="member">lco_smiZ</ref>;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/>vnbg.insert<sp/>(v);<sp/></highlight><highlight class="comment">//<sp/>Now,<sp/>vnbg<sp/>is<sp/>the<sp/>set<sp/>of<sp/>v<sp/>and<sp/>its<sp/>neighbours.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="graphsim_8h_1a3" kindref="member">VtxIdxIter</ref><sp/>i<sp/>=<sp/>vnbg.begin();<sp/>i<sp/>!=<sp/>vnbg.end();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="graphsim_8h_1a3" kindref="member">VtxIdxIter</ref><sp/>j<sp/>=<sp/>i;<sp/>j<sp/>!=<sp/>vnbg.end();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>!=<sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toggle_edge<sp/>(*i,<sp/>*j);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>res)<sp/>{</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Messergebnis:<sp/>+|0y&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertices[v].byprod<sp/>=<sp/>vertices[v].byprod<sp/>*<sp/><ref refid="loccliff_8h_1a12" kindref="member">lco_S</ref>;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Messergebnis:<sp/>-|0y&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertices[v].byprod<sp/>=<sp/>vertices[v].byprod<sp/>*<sp/><ref refid="loccliff_8h_1a12" kindref="member">lco_S</ref>.<ref refid="structLocCliffOp_1a4" kindref="member">herm_adjoint</ref>();</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="305"><highlight class="normal">}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GraphRegister::graph_X_measure<sp/>(<ref refid="graphsim_8h_1a1" kindref="member">VertexIndex</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>determined,<sp/></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>force)<sp/></highlight></codeline>
<codeline lineno="310"><highlight class="normal">{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertices[v].neighbors.size<sp/>()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//not<sp/>entangled<sp/>qubit<sp/>=&gt;<sp/>result<sp/>always<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DBGOUT<sp/>(</highlight><highlight class="stringliteral">&quot;gXm&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,D<sp/>&quot;</highlight><highlight class="normal">);<sp/></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(determined<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*determined<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(determined<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*determined<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>entangled<sp/>qubit<sp/>=&gt;<sp/>let&apos;s<sp/>get<sp/>on<sp/>with<sp/>the<sp/>complicated<sp/>procedure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>throw<sp/>a<sp/>die:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(force<sp/>==<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>bool_rand<sp/>();</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>force;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/>DBGOUT<sp/>(</highlight><highlight class="stringliteral">&quot;gXm&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>res<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/>DBGOUT<sp/>(</highlight><highlight class="stringliteral">&quot;forced:<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>force<sp/>&lt;&lt;<sp/>endl);</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><ref refid="graphsim_8h_1a1" kindref="member">VertexIndex</ref><sp/>vb<sp/>=<sp/>*vertices[v].neighbors.begin();<sp/></highlight><highlight class="comment">//<sp/>the<sp/>choosen<sp/>vertex</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//D<sp/>cerr<sp/>&lt;&lt;<sp/>&quot;vb<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>vb<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>preparation<sp/>step:<sp/>store<sp/>the<sp/>neighborhood<sp/>of<sp/>v<sp/>and<sp/>vb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/>hash_set&lt;VertexIndex&gt;<sp/>vn<sp/>=<sp/>vertices[v].neighbors;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/>hash_set&lt;VertexIndex&gt;<sp/>vbn<sp/>=<sp/>vertices[vb].neighbors;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>put<sp/>the<sp/>byproduct<sp/>ops:<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<sp/>res)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>measured<sp/>a<sp/>|+&gt;:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lco_spiY<sp/>on<sp/>vb</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertices[vb].byprod<sp/>=<sp/>vertices[vb].byprod<sp/>*<sp/><ref refid="loccliff_8h_1a8" kindref="member">lco_spiY</ref>;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Z<sp/>on<sp/>all<sp/>in<sp/>nbg(v)<sp/>\<sp/>nbg(vb)<sp/>\<sp/>{vb}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="graphsim_8h_1a3" kindref="member">VtxIdxIter</ref><sp/>i<sp/>=<sp/>vertices[v].neighbors.begin();<sp/></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>!=<sp/>vertices[v].neighbors.end();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*i<sp/>!=<sp/>vb<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertices[vb].neighbors.find(*i)<sp/>==<sp/>vertices[vb].neighbors.end())<sp/>{<sp/><sp/></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertices[*i].byprod<sp/>=<sp/>vertices[*i].byprod<sp/>*<sp/><ref refid="loccliff_8h_1a4" kindref="member">lco_Z</ref>;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>measured<sp/>a<sp/>|-&gt;:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>lco_smiY<sp/>on<sp/>vb,<sp/>and<sp/>lco_Z<sp/>on<sp/>v:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertices[vb].byprod<sp/>=<sp/>vertices[vb].byprod<sp/>*<sp/><ref refid="loccliff_8h_1a9" kindref="member">lco_smiY</ref>;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertices[v].byprod<sp/>=<sp/>vertices[v].byprod<sp/>*<sp/><ref refid="loccliff_8h_1a4" kindref="member">lco_Z</ref>;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Z<sp/>on<sp/>all<sp/>in<sp/>nbg(vb)<sp/>\<sp/>nbg(v)<sp/>\<sp/>{v}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="graphsim_8h_1a3" kindref="member">VtxIdxIter</ref><sp/>i<sp/>=<sp/>vertices[vb].neighbors.begin();<sp/></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>!=<sp/>vertices[vb].neighbors.end();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*i<sp/>!=<sp/>v<sp/>&amp;&amp;<sp/></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertices[v].neighbors.find(*i)<sp/>==<sp/>vertices[v].neighbors.end())<sp/>{<sp/><sp/></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vertices[*i].byprod<sp/>=<sp/>vertices[*i].byprod<sp/>*<sp/><ref refid="loccliff_8h_1a4" kindref="member">lco_Z</ref>;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Toggling<sp/>the<sp/>edges<sp/>in<sp/>three<sp/>steps</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>STEP<sp/>1:<sp/>complement<sp/>with<sp/>Edges<sp/>(nbg(v),<sp/>nbg(vb)):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/>toggle_edges<sp/>(vn,<sp/>vbn);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>STEP<sp/>2:<sp/>complement<sp/>with<sp/>the<sp/>complete<sp/>subgraph<sp/>induced<sp/>by<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>intersection<sp/>of<sp/>nbg(v)<sp/>and<sp/>nbg(vb):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>make<sp/>the<sp/>intersection</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/>hash_set&lt;VertexIndex&gt;<sp/>isc;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="graphsim_8h_1a3" kindref="member">VtxIdxIter</ref><sp/>i<sp/>=<sp/>vn.begin();<sp/>i<sp/>!=<sp/>vn.end();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vbn.find(*i)<sp/>!=<sp/>vbn.end())<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isc.insert<sp/>(*i);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now,<sp/>toggle<sp/>the<sp/>edges</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="graphsim_8h_1a3" kindref="member">VtxIdxIter</ref><sp/>i<sp/>=<sp/>isc.begin();<sp/>i<sp/>!=<sp/>isc.end();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="graphsim_8h_1a3" kindref="member">VtxIdxIter</ref><sp/>j<sp/>=<sp/>i;<sp/>j<sp/>!=<sp/>isc.end();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*i<sp/>!=<sp/>*j)<sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toggle_edge<sp/>(*i,<sp/>*j);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>STEP<sp/>3:<sp/>Toggle<sp/>all<sp/>edges<sp/>from<sp/>vb<sp/>to<sp/>nbg(v)<sp/>\<sp/>{vb}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="graphsim_8h_1a3" kindref="member">VtxIdxIter</ref><sp/>i<sp/>=<sp/>vn.begin();<sp/>i<sp/>!=<sp/>vn.end();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*i<sp/>!=<sp/>vb)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toggle_edge<sp/>(vb,<sp/>*i);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="389"><highlight class="normal">}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="comment">/*<sp/>For<sp/>basis,<sp/>pass<sp/>a<sp/>LocCliffOp<sp/>object<sp/>which<sp/>has<sp/>to<sp/>be<sp/>equal<sp/>to<sp/>one<sp/>of<sp/>lco_X,<sp/>lco_Y</highlight></codeline>
<codeline lineno="393"><highlight class="comment">or<sp/>lco_Z.<sp/>If<sp/>you<sp/>want<sp/>to<sp/>now,<sp/>whether<sp/>the<sp/>result<sp/>was<sp/>choosen<sp/>at<sp/>random<sp/>or<sp/>determined</highlight></codeline>
<codeline lineno="394"><highlight class="comment">by<sp/>the<sp/>state,<sp/>pass<sp/>a<sp/>bool<sp/>pointer<sp/>in<sp/>which<sp/>this<sp/>information<sp/>will<sp/>be<sp/>written.</highlight></codeline>
<codeline lineno="395"><highlight class="comment">If<sp/>you<sp/>want<sp/>to<sp/>force<sp/>the<sp/>result<sp/>to<sp/>be<sp/>a<sp/>certain<sp/>value,<sp/>pass<sp/>0<sp/>or<sp/>1<sp/>to<sp/>&apos;force&apos;.<sp/>This<sp/>only</highlight></codeline>
<codeline lineno="396"><highlight class="comment">works,<sp/>if<sp/>the<sp/>result<sp/>is<sp/>not<sp/>determined.<sp/>If<sp/>it<sp/>is,<sp/>&apos;force&apos;<sp/>is<sp/>ignored.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397" refid="classGraphRegister_1a10" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classGraphRegister_1a10" kindref="member">GraphRegister::measure</ref><sp/>(<ref refid="graphsim_8h_1a1" kindref="member">VertexIndex</ref><sp/>v,<sp/><ref refid="structLocCliffOp" kindref="compound">LocCliffOp</ref><sp/>basis,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>determined,</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>force)<sp/></highlight></codeline>
<codeline lineno="399"><highlight class="normal">{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/>assert<sp/>(basis.<ref refid="structLocCliffOp_1o0" kindref="member">op</ref><sp/>&gt;=<sp/><ref refid="loccliff_8h_1a2" kindref="member">lco_X</ref>.<ref refid="structLocCliffOp_1o0" kindref="member">op</ref><sp/>&amp;&amp;<sp/>basis.<ref refid="structLocCliffOp_1o0" kindref="member">op</ref><sp/>&lt;=<sp/><ref refid="loccliff_8h_1a4" kindref="member">lco_Z</ref>.<ref refid="structLocCliffOp_1o0" kindref="member">op</ref>);</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(determined<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*determined<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/>assert<sp/>(force<sp/>&gt;=<sp/>-1<sp/>&amp;&amp;<sp/>force<sp/>&lt;=<sp/>1);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><ref refid="structLocCliffOp" kindref="compound">LocCliffOp</ref><sp/>basis_orig<sp/>=<sp/>basis;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><ref refid="structRightPhase" kindref="compound">RightPhase</ref><sp/>rp<sp/>=<sp/>basis.<ref refid="structLocCliffOp_1a3" kindref="member">conjugate</ref><sp/>(vertices[v].byprod.herm_adjoint());</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/>assert<sp/>(rp<sp/>==<sp/><ref refid="loccliff_8h_1a14" kindref="member">rp_p1</ref><sp/>||<sp/>rp<sp/>==<sp/><ref refid="loccliff_8h_1a16" kindref="member">rp_m1</ref>);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(force<sp/>!=<sp/>-1<sp/>&amp;&amp;<sp/>rp<sp/>==<sp/><ref refid="loccliff_8h_1a16" kindref="member">rp_m1</ref>)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>force<sp/>=<sp/>force<sp/>^<sp/>0x01;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(basis.<ref refid="structLocCliffOp_1o0" kindref="member">op</ref>)<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1<sp/></highlight><highlight class="comment">/*<sp/>lco_X<sp/>*/</highlight><highlight class="normal">:<sp/>res<sp/>=<sp/>graph_X_measure<sp/>(v,<sp/>determined,<sp/>force);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2<sp/></highlight><highlight class="comment">/*<sp/>lco_Y<sp/>*/</highlight><highlight class="normal">:<sp/>res<sp/>=<sp/>graph_Y_measure<sp/>(v,<sp/>force);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>3<sp/></highlight><highlight class="comment">/*<sp/>lco_Z<sp/>*/</highlight><highlight class="normal">:<sp/>res<sp/>=<sp/>graph_Z_measure<sp/>(v,<sp/>force);<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:<sp/>exit<sp/>(1);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rp<sp/>==<sp/><ref refid="loccliff_8h_1a16" kindref="member">rp_m1</ref>)<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>res<sp/>=<sp/>!<sp/>res;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(rp<sp/>==<sp/><ref refid="loccliff_8h_1a14" kindref="member">rp_p1</ref>);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check:<sp/>the<sp/>measured<sp/>vertex<sp/>should<sp/>be<sp/>singled<sp/>out:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/>assert<sp/>(vertices[v].neighbors.size()<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>the<sp/>vertex<sp/>is<sp/>now<sp/>in<sp/>the<sp/>correct<sp/>eigenstate:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><ref refid="structLocCliffOp" kindref="compound">LocCliffOp</ref><sp/>assert_op<sp/>=<sp/><ref refid="loccliff_8h_1a2" kindref="member">lco_X</ref>;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/>assert<sp/>(assert_op.<ref refid="structLocCliffOp_1a3" kindref="member">conjugate</ref><sp/>(vertices[v].byprod)<sp/>==<sp/>(res<sp/>?<sp/><ref refid="loccliff_8h_1a16" kindref="member">rp_m1</ref><sp/>:<sp/><ref refid="loccliff_8h_1a14" kindref="member">rp_p1</ref>));</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/>assert<sp/>(assert_op<sp/>==<sp/>basis_orig);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>res;</highlight></codeline>
<codeline lineno="430"><highlight class="normal">}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="433"><highlight class="comment">/*<sp/>This<sp/>changes<sp/>the<sp/>state&apos;s<sp/>graph<sp/>representation<sp/>but<sp/>not<sp/>the<sp/>state<sp/>itself,<sp/>as<sp/>the</highlight></codeline>
<codeline lineno="434"><highlight class="comment">necessary<sp/>correction<sp/>to<sp/>the<sp/>VOps<sp/>are<sp/>applied.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435" refid="classGraphRegister_1a12" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classGraphRegister_1a12" kindref="member">GraphRegister::invert_neighborhood</ref><sp/>(<ref refid="graphsim_8h_1a1" kindref="member">VertexIndex</ref><sp/>v)</highlight></codeline>
<codeline lineno="436"><highlight class="normal">{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Invert<sp/>the<sp/>neighborhood:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>DEBUGOUTPUT</highlight></codeline>
<codeline lineno="439"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DBGOUT<sp/>(</highlight><highlight class="stringliteral">&quot;Inverting<sp/>about<sp/>&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGraphRegister_1a14" kindref="member">print_adj_list_line</ref><sp/>(cout,<sp/>v);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="442"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/>hash_set&lt;VertexIndex&gt;<sp/>vn<sp/>=<sp/>vertices[v].neighbors;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="graphsim_8h_1a3" kindref="member">VtxIdxIter</ref><sp/>i<sp/>=<sp/>vn.begin();<sp/>i<sp/>!=<sp/>vn.end();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(<ref refid="graphsim_8h_1a3" kindref="member">VtxIdxIter</ref><sp/>j<sp/>=<sp/>i;<sp/>j<sp/>!=<sp/>vn.end();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*i<sp/>!=<sp/>*j)<sp/>{</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//cerr<sp/>&lt;&lt;<sp/>&quot;toggling<sp/>&quot;<sp/>&lt;&lt;<sp/>*i<sp/>&lt;&lt;<sp/>&quot;,&quot;<sp/>&lt;&lt;<sp/>*j<sp/>&lt;&lt;<sp/>endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>toggle_edge<sp/>(*i,<sp/>*j);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>adjust<sp/>the<sp/>local<sp/>Cliffords:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vertices[*i].byprod<sp/>=<sp/>vertices[*i].byprod<sp/>*<sp/><ref refid="loccliff_8h_1a6" kindref="member">lco_spiZ</ref>.<ref refid="structLocCliffOp_1a4" kindref="member">herm_adjoint</ref>();</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>finally,<sp/>adjust<sp/>the<sp/>local<sp/>Clifford<sp/>of<sp/>v:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/>vertices[v].byprod<sp/>=<sp/>vertices[v].byprod<sp/>*<sp/><ref refid="loccliff_8h_1a11" kindref="member">lco_smiX</ref>.<ref refid="structLocCliffOp_1a4" kindref="member">herm_adjoint</ref>();</highlight></codeline>
<codeline lineno="455"><highlight class="normal">}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="comment">/*<sp/>&apos;avoid&apos;<sp/>is<sp/>avoided<sp/>as<sp/>swapping<sp/>partner,<sp/>i.e.<sp/>the<sp/>swapping<sp/>partner<sp/>will<sp/>not<sp/></highlight></codeline>
<codeline lineno="459"><highlight class="comment">be<sp/>&apos;avoid&apos;<sp/>unless<sp/>this<sp/>is<sp/>the<sp/>only<sp/>neighbor<sp/>of<sp/>v.<sp/>If<sp/>no<sp/>neighbor<sp/>is<sp/>available,<sp/></highlight></codeline>
<codeline lineno="460"><highlight class="comment">the<sp/>program<sp/>exits<sp/>with<sp/>error<sp/>message.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>GraphRegister::remove_byprod_op<sp/>(<ref refid="graphsim_8h_1a1" kindref="member">VertexIndex</ref><sp/>v,<sp/><ref refid="graphsim_8h_1a1" kindref="member">VertexIndex</ref><sp/>avoid)</highlight></codeline>
<codeline lineno="462"><highlight class="normal">{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>lookup<sp/>table<sp/>on<sp/>how<sp/>any<sp/>LC<sp/>operator<sp/>can<sp/>be<sp/>composed<sp/>from<sp/>them</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>generators<sp/>lco_spiZ<sp/>(denoted<sp/>&apos;V&apos;)<sp/>and<sp/>lco_smiX<sp/>(denoted<sp/>&apos;U&apos;):</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(The<sp/>lookup<sp/>table<sp/>was<sp/>generated<sp/>from<sp/>sqrt-gen.nb<sp/>and<sp/>copied<sp/>here<sp/>manually.)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>comp_tbl<sp/>[24]<sp/>=</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>{</highlight><highlight class="stringliteral">&quot;UUUU&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;UU&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;VVUU&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;VV&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;VUU&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;V&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;VVV&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;UUV&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;UVU&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;UVUUU&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;UVVVU&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;UUUVU&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;UVV&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;VVU&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;UUU&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;U&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;VVVU&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;UUVU&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;VU&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;VUUU&quot;</highlight><highlight class="normal">,<sp/></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;UUUV&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;UVVV&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;UV&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;UVUU&quot;</highlight><highlight class="normal">};</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Of<sp/>course,<sp/>we<sp/>need<sp/>a<sp/>neighborhood</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vertices[v].neighbors.size()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>cerr<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;remove_byprod_op:<sp/>called<sp/>with<sp/>isolated<sp/>vertex.<sp/>Aborting.\n&quot;</highlight><highlight class="normal">;<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>will<sp/>be<sp/>the<sp/>swapping<sp/>partner:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><ref refid="graphsim_8h_1a1" kindref="member">VertexIndex</ref><sp/>vb<sp/>=<sp/>*<sp/>vertices[v].neighbors.begin<sp/>();</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vb<sp/>==<sp/>avoid)<sp/>{</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Is<sp/>there<sp/>an<sp/>alternative<sp/>to<sp/>&apos;avoid&apos;?<sp/>If<sp/>so,<sp/>use<sp/>it.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="graphsim_8h_1a3" kindref="member">VtxIdxIter</ref><sp/>vbi<sp/>=<sp/>vertices[v].neighbors.begin<sp/>();</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vbi++;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(vbi<sp/>!=<sp/>vertices[v].neighbors.end())<sp/>{</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vb<sp/>=<sp/>*vbi;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/>}<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>DEBUGOUTPUT</highlight></codeline>
<codeline lineno="488"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DBGOUT<sp/>(</highlight><highlight class="stringliteral">&quot;remove_byprod_op<sp/>called:<sp/>(v,<sp/>avoid,<sp/>vb):\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGraphRegister_1a14" kindref="member">print_adj_list_line</ref><sp/>(cout,<sp/>v);</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGraphRegister_1a14" kindref="member">print_adj_list_line</ref><sp/>(cout,<sp/>avoid);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGraphRegister_1a14" kindref="member">print_adj_list_line</ref><sp/>(cout,<sp/>vb);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="493"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<sp/>comp<sp/>=<sp/>comp_tbl[vertices[v].byprod.op];</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/>DBGOUT<sp/>(</highlight><highlight class="stringliteral">&quot;using<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>comp<sp/>&lt;&lt;<sp/>endl);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos<sp/>=<sp/>strlen(comp)-1;<sp/>pos<sp/>&gt;=<sp/>0;<sp/>pos--)<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(comp[pos]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;U&apos;</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>U<sp/>will<sp/>vanish<sp/>if<sp/>we<sp/>do<sp/>an<sp/>inversion<sp/>on<sp/>v</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBGOUT<sp/>(</highlight><highlight class="stringliteral">&quot;U<sp/>-&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGraphRegister_1a12" kindref="member">invert_neighborhood</ref><sp/>(v);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert<sp/>(comp[pos]<sp/>==<sp/></highlight><highlight class="charliteral">&apos;V&apos;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DBGOUT<sp/>(</highlight><highlight class="stringliteral">&quot;V<sp/>-&gt;&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>this<sp/>we<sp/>need<sp/>to<sp/>invert<sp/>on<sp/>a<sp/>neighbor<sp/>of<sp/>v</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGraphRegister_1a12" kindref="member">invert_neighborhood</ref><sp/>(vb);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifdef<sp/>DEBUGOUTPUT</highlight></codeline>
<codeline lineno="508"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>DBGOUT<sp/>(</highlight><highlight class="stringliteral">&quot;remove_byprod_op,<sp/>after:<sp/>(v,<sp/>avoid,<sp/>vb):\n&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGraphRegister_1a14" kindref="member">print_adj_list_line</ref><sp/>(cout,<sp/>v);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGraphRegister_1a14" kindref="member">print_adj_list_line</ref><sp/>(cout,<sp/>avoid);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classGraphRegister_1a14" kindref="member">print_adj_list_line</ref><sp/>(cout,<sp/>vb);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight></codeline>
<codeline lineno="513"><highlight class="preprocessor"></highlight><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now,<sp/>we<sp/>should<sp/>have<sp/>lco_Id<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/>assert<sp/>(vertices[v].byprod<sp/>==<sp/>lco_Id);<sp/></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/net/dopey1/sanders/work/graphsim-0.10/graphsim.cpp"/>
  </compounddef>
</doxygen>
